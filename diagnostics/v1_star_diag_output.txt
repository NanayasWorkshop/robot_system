STAR → COLLISION BRIDGE DIAGNOSTIC
Extracting exact data formats for bridge design

============================================================
STAR INTERFACE DIAGNOSTIC
============================================================
Initializing STAR model...
Using device: cuda
✅ STAR model initialized successfully

============================================================
NEUTRAL POSE DIAGNOSTIC
============================================================
Using device: cuda
Input Parameters:
  Pose params shape: torch.Size([1, 72])
  Shape params shape: torch.Size([1, 10])
  Translation shape: torch.Size([1, 3])

STAR Output (vertices only):
  Vertices shape: torch.Size([1, 6890, 3])
  Joints from J_regressor: torch.Size([1, 24, 3])

============================================================
MESH VERTICES DIAGNOSTIC
============================================================
Vertex Data Format:
  Shape: (6890, 3)
  Type: <class 'numpy.ndarray'>
  Dtype: float32

Vertex Statistics:
  Total vertices: 6890
  Min coordinates: [-0.901, -1.179, -0.133]
  Max coordinates: [0.902, 0.568, 0.184]
  Mean coordinates: [-0.000, 0.000, 0.000]

Sample Vertices:
  Vertex[   0]: (   0.047,    0.503,    0.085)
  Vertex[1722]: (   0.541,    0.211,   -0.077)
  Vertex[3445]: (   0.132,   -1.170,   -0.003)
  Vertex[5167]: (  -0.420,    0.238,   -0.070)
  Vertex[6889]: (  -0.079,    0.437,    0.000)

============================================================
JOINT POSITIONS DIAGNOSTIC
============================================================
Joint Data Format:
  Shape: (24, 3)
  Type: <class 'numpy.ndarray'>
  Dtype: float32

Joint Statistics:
  Total joints: 24
  Expected joints: 24
  Min coordinates: [-0.804, -1.159, -0.057]
  Max coordinates: [0.802, 0.369, 0.112]
  Mean coordinates: [-0.001, -0.169, -0.001]

Joint Positions:
  Joint[ 0] pelvis         : (  -0.004,   -0.235,    0.028)
  Joint[ 1] left_hip       : (   0.059,   -0.336,    0.019)
  Joint[ 2] right_hip      : (  -0.064,   -0.338,    0.022)
  Joint[ 3] spine1         : (  -0.009,   -0.117,    0.011)
  Joint[ 4] left_knee      : (   0.094,   -0.704,    0.022)
  Joint[ 5] right_knee     : (  -0.095,   -0.708,    0.022)
  Joint[ 6] spine2         : (  -0.000,    0.017,    0.001)
  Joint[ 7] left_ankle     : (   0.095,   -1.110,   -0.023)
  Joint[ 8] right_ankle    : (  -0.099,   -1.114,   -0.024)
  Joint[ 9] spine3         : (   0.003,    0.084,    0.011)
  Joint[10] left_foot      : (   0.113,   -1.157,    0.112)
  Joint[11] right_foot     : (  -0.116,   -1.159,    0.112)
  Joint[12] neck           : (  -0.008,    0.280,   -0.012)
  Joint[13] left_collar    : (   0.092,    0.202,   -0.011)
  Joint[14] right_collar   : (  -0.094,    0.197,   -0.015)
  Joint[15] head           : (   0.018,    0.369,    0.023)
  Joint[16] left_shoulder  : (   0.187,    0.225,   -0.014)
  Joint[17] right_shoulder : (  -0.187,    0.222,   -0.023)
  Joint[18] left_elbow     : (   0.451,    0.223,   -0.038)
  Joint[19] right_elbow    : (  -0.449,    0.219,   -0.041)
  Joint[20] left_wrist     : (   0.705,    0.225,   -0.043)
  Joint[21] right_wrist    : (  -0.706,    0.221,   -0.044)
  Joint[22] left_hand      : (   0.802,    0.218,   -0.052)
  Joint[23] right_hand     : (  -0.804,    0.215,   -0.057)

============================================================
POSE UPDATE DIAGNOSTIC
============================================================
Testing pose parameter updates:

  Testing neutral pose...
    ✅ Success: 6890 vertices, 24 joints
      Joint[0]: (-0.004, -0.235,  0.028)
      Joint[3]: (-0.009, -0.117,  0.011)
      Joint[6]: (-0.000,  0.017,  0.001)
      Joint[9]: ( 0.003,  0.084,  0.011)
      Joint[15]: ( 0.018,  0.369,  0.023)
      Joint[16]: ( 0.187,  0.225, -0.014)
      Joint[17]: (-0.187,  0.222, -0.023)

  Testing spine_bend pose...
    ✅ Success: 6890 vertices, 24 joints
      Joint[0]: (-0.004, -0.235,  0.027)
      Joint[3]: (-0.009, -0.117,  0.011)
      Joint[6]: (-0.000,  0.017,  0.001)
      Joint[9]: ( 0.003,  0.084,  0.011)
      Joint[15]: ( 0.018,  0.369,  0.023)
      Joint[16]: ( 0.187,  0.224, -0.014)
      Joint[17]: (-0.187,  0.222, -0.023)

  Testing arm_raise pose...
    ✅ Success: 6890 vertices, 24 joints
      Joint[0]: (-0.004, -0.235,  0.028)
      Joint[3]: (-0.009, -0.117,  0.011)
      Joint[6]: ( 0.000,  0.015,  0.002)
      Joint[9]: ( 0.003,  0.080,  0.010)
      Joint[15]: ( 0.015,  0.369,  0.023)
      Joint[16]: ( 0.170,  0.236, -0.038)
      Joint[17]: (-0.186,  0.222, -0.023)

============================================================
STAR-COLLISION BRIDGE REQUIREMENTS
============================================================

INPUT (from STAR):
  - vertices: numpy array (N, 3) - mesh vertices in world space
  - joints: numpy array (24, 3) - bone positions for 24 STAR joints
  - coordinate system: STAR default (Y-up, person lying on back)

PROCESSING STEPS:
  1. Transform STAR joint positions to collision engine coordinate system
  2. Update LayerManager with new bone positions
  3. Update collision primitives (Layer 3, 2, 1 hierarchies)
  4. Handle mesh vertex updates if needed

OUTPUT (for Collision Engine):
  - Updated bone_positions: vector<Eigen::Vector3d> (24 joints)
  - Coordinate system: Same as collision detection expects
  - Success/failure status

BRIDGE FUNCTION SIGNATURE:
  bool update_collision_from_star(
    CollisionDetectionEngine& engine,
    const std::vector<Eigen::Vector3d>& star_bone_positions)

COORDINATE SYSTEM NOTES:
  - STAR: Y-up, person lying on back
  - Robot: Need to verify coordinate system
  - May need transformation matrix between systems

============================================================
STAR DIAGNOSTIC COMPLETE
Use this output to design the C++ STAR-collision bridge
============================================================
