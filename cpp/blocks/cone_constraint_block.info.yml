# cone_constraint_block.info.yml
name: "Cone Constraint Block"
description: "Projects direction vectors onto spherical joint cone constraints for FABRIK algorithm"
version: "1.0"
category: "fundamental_block"
level: 0

inputs:
  - name: "desired_direction"
    type: "Eigen::Vector3d"
    description: "Direction vector to be constrained"
    constraints: "Any vector (zero vectors return unchanged)"
  - name: "cone_apex"
    type: "Eigen::Vector3d"
    description: "The joint position (apex of cone)"
    constraints: "Any 3D position"
  - name: "cone_axis"
    type: "Eigen::Vector3d"
    description: "Direction from apex (will be normalized internally)"
    constraints: "Non-zero vector"
  - name: "cone_angle_rad"
    type: "double"
    description: "Full cone angle in radians (internally halved for calculation)"
    constraints: "Positive value ≤ π (typically 2π/3 for 120° spherical joints)"

outputs:
  - name: "projected_direction"
    type: "Eigen::Vector3d"
    description: "Direction vector projected onto cone surface (if constraint needed)"
  - name: "constraint_applied"
    type: "bool"
    description: "Whether modification was needed (false if input was within cone)"
  - name: "calculation_time_ms"
    type: "double"
    description: "Time taken for calculation in milliseconds"

dependencies:
  - "core/constants.hpp"
  - "core/timing.hpp"
  - "Eigen/Dense"

constants_used:
  - "SPHERICAL_JOINT_CONE_ANGLE_RAD (2π/3 radians = 120°)"

internal_blocks:
  - "None"

performance:
  typical_time_range: "0.05-0.15ms"

algorithm:
  - "Normalize input direction and cone axis"
  - "Calculate angle between direction and cone axis using dot product"
  - "If angle ≤ cone_half_angle, return original direction (no constraint)"
  - "If angle > cone_half_angle, project onto cone surface:"
  - "  - Decompose direction into parallel and perpendicular components"
  - "  - Create new direction on cone surface closest to desired direction"
  - "  - Scale to preserve original magnitude"

fabrik_integration:
  usage: "Used in backward and forward iterations to enforce spherical joint constraints"
  joint_type: "SPHERICAL_120 joints with 120° cone constraints"
  cone_axis: "Points from reference joint toward apex joint"
  
notes:
  - "Level 0 fundamental block - no dependencies on other blocks"
  - "Extracted from proven FABRIK constraint_utils.cpp implementation"
  - "Handles degenerate cases (zero direction, parallel axes) gracefully"
  - "Preserves original direction magnitude after projection"
  - "Input validation prevents invalid cone angles or zero axes"
  - "Convenience method for standard 120° spherical joints"